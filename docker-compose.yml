version: '3'
services:

  webserver:
    image: nginx:alpine
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
      - "5000:5000"
      - "443:443"
    volumes:
      - ./apps/gateway/:/var/www/gateway
      - ./apps/basic/:/var/www/basic
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites/:/etc/nginx/conf.d/
      - ./docker/nginx/ssl/:/etc/ssl/
    networks:
      - app-network

  gateway:
    build:
      context: apps/gateway
      dockerfile: Dockerfile
    image: ghcr.io/tasideris/e-fee:1.8
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: gateway
      SERVICE_TAGS: dev
    working_dir: /var/www/gateway
    volumes:
      - ./apps/gateway/:/var/www/gateway
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network

  basic:
    build:
      context: apps/basic
      dockerfile: Dockerfile
    image: ghcr.io/tasideris/e-fee-basic:1.8
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: basic
      SERVICE_TAGS: dev
    working_dir: /var/www/basic
    volumes:
      - ./apps/basic/:/var/www/basic
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network

  #MySQL Service
  db:
    image: mysql:8
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: laravel
      MYSQL_ROOT_PASSWORD: password
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql/
      - ./mysql/files:/var/lib/mysql-files
    networks:
      - app-network
  
  #Mailhog service
  mailhog:
    container_name: e-fee-mailhog
    image: 'mailhog/mailhog:latest'
    ports:
      - 1025:1025
      - 8025:8025
    networks:
      - app-network
  
  #Keycloak service
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:15.0.2
    ports: 
      - 8443:8443
    environment:
      KEYCLOAK_USER: 'admin'
      KEYCLOAK_PASSWORD: 'admin'
    networks:
      - app-network

#Docker Networks
networks:
    app-network:
      driver: bridge

#Volumes
volumes:
    dbdata:
      driver: local
